(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     91231,       1967]
NotebookOptionsPosition[     88706,       1880]
NotebookOutlinePosition[     89073,       1896]
CellTagsIndexPosition[     89030,       1893]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PhysicalConstants`\>\"", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Introduce", " ", "parameters"}], " ", "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Z", "=", "83"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Alpha]", "=", "0.0072973525376"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"e", "=", 
     RowBox[{"ElectronCharge", "/", "Coulomb"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"element", "=", 
     RowBox[{"-", "Z"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"diracPointEnergy", " ", "[", 
      RowBox[{"Ze_", ",", "n_", ",", "k_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Export", "[", 
        RowBox[{"\"\<imputdata2.dat\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"Ze", ",", "n", ",", "k"}], "}"}], "}"}]}], "]"}], ";", 
       RowBox[{"SetPrecision", "[", 
        RowBox[{
         RowBox[{"RunThrough", "[", 
          RowBox[{"\"\<c:\\\\f\\\\radial\\\\pointdiracwaves\>\"", ",", "Ze"}],
           "]"}], ",", "13"}], "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]",
    " ", 
   RowBox[{
    RowBox[{
     RowBox[{"En", "[", 
      RowBox[{"Ze_", ",", "n_", ",", "k_"}], "]"}], ":=", 
     RowBox[{
      SuperscriptBox["\[Alpha]", 
       RowBox[{"-", "2"}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", 
         FractionBox[
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"\[Alpha]", "*", "Ze"}], ")"}], "2"], 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox["k", "2"], "-", 
                SuperscriptBox[
                 RowBox[{"(", 
                  RowBox[{"\[Alpha]", " ", "Ze"}], ")"}], "2"]}], ")"}], 
              RowBox[{"1", "/", "2"}]], "+", "n", "-", 
             RowBox[{"Abs", "[", "k", "]"}]}], ")"}], "2"]]}], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "/", "2"}]]}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.5865314171619663`*^9, 3.5865314576120234`*^9}, 
   3.5865315189921093`*^9, {3.586531575432188*^9, 3.586531610472237*^9}, {
   3.5865319131626606`*^9, 3.5865319213926725`*^9}, {3.5865319542727184`*^9, 
   3.5865319564427214`*^9}, {3.5895454494524207`*^9, 3.589545574939041*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"BPolynomial", "[", 
   RowBox[{"n_", ",", "i_", ",", "a_", ",", "b_", ",", "x_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Binomial", "[", 
    RowBox[{"n", ",", "i"}], "]"}], 
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"x", "-", "a"}], ")"}], "i"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"b", "-", "x"}], ")"}], 
      RowBox[{"n", "-", "i"}]]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"b", "-", "a"}], ")"}], "n"]], " "}]}]], "Input",
 CellChangeTimes->{{3.586518613253986*^9, 3.586518663361274*^9}, {
  3.586518710535757*^9, 3.5865187812974806`*^9}, {3.5865207496514645`*^9, 
  3.58652075269347*^9}, {3.5865208340788136`*^9, 3.586520838493621*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"BPolynomial", "[", 
       RowBox[{"5", ",", "k", ",", 
        RowBox[{"-", "1"}], ",", "1", ",", "x"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "0", ",", "5"}], "}"}]}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.58651885483601*^9, 3.5865189049744983`*^9}, {
  3.5865208427368283`*^9, 3.5865208461688347`*^9}, {3.5865215035383887`*^9, 
  3.586521504848791*^9}, {3.5865230000844345`*^9, 3.586523002034437*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwtWXc0Fv73p5JSUULZu4zH/Ng87yuysiISMktZiQgpsjIqIxIqsjPKqBDh
yZaZPbMf4/EMe0V9+53z++uee16vc+953de9f11e+7vGDgeoqKjyqKmo/i+K
Awvh718KjjVV/se/CHd3+CN2dik4Nyn1Do81ChR/ljq3tkHBBV2zrZufo4C0
kL793BIFp9J19tFEBwXkT4WOtA9ScNtPnp/+84YCqjMrrclFFNyxvEsHtxQo
YBzeUfCfDQUncprHq/s+GXy6Qu/criHjcliaQzd2idDXd4xQa0fCCYnuLOxv
LQLn97tM8hxEnGf//kODG/NQ6tJAw/CLgCt++K45kwEPts+lloeDF3HmG6Ge
Z79Pw3bcwwgcLOBG8h6KULdMQib9OGvS1ByugPHn29UPv+DtJal7vZF4XMh9
+8JF+REIdrXzFdaZxfk33BXLvDQIDw/m+9wjTeNk+Ri5rF36wC6wS2AgdwrH
W8f3TI6qBxKq8UlvnSdxszU9f5TKu6ByQuj4B75x3OSpDvF3kW3Af1JVzSR1
FLdcVlKicrwFPolEOE/PDOFedz4kJ31ogInGEh45uQGcjy3JY7i6FvCYBGlc
WS+ORWHlWXd6DZwKyJMTp+7GSZFT+Bz3KgAjR8Fkr7XjgkNet89iyiDkIuln
hW8zzr350fec2E/AbFIYa36mDre0WJAzsVcInzYbGVoEKnH1hTjV+EP5kD2K
j1oMLcR5s7mzYW2ywcqI48vojZc4Rs75K9a56VBB97C/7n48nAyP7EljTAHZ
aWquoGtFoOhCJypsmgjilWYrknlF8Fn5pszrC4lwLu5jw+ROEfy68srqrHgi
HEv/IJumXwwTrswbyrSJsHf52thfcjFIHNh9zF35Cn4VFwnjpD7BTL+3tjHf
K3jnbt2ALf8CT/8MSiruvQT+5W87SnUV8NHNcOV9Xxw86lAPXSdVQInCiGFH
XRwM5LfRF7JWQvxCjzJVSRw8dRjl5/WoBMc74inRUXGwPLKrT8vzDQ65MRfq
acVBTaNiRq9/FRQTfa5qVb8Aizfll1wV/20E1Zkf1J9jQSdzuMPgWh1YfV7r
GQ6PguUnhbca79TBxRS7kD/OUZDkGPJXOaQOHv2RbFY0iIIFMTEp4cI66Mxf
7V1jioKIr4EvDx6qh5Zp1livzOfQ0nHe8mtRPayfKGNKaXgGWtv3F3hpG4Hl
Z7yLxJmnoKHPeHCjtBkqLUtX4nbDINru6MrOj2a45sNgFjUbBkP3qSb+/GoG
9cKl9KTOMHBOJVceOdwCxSZqtVMZ//iU1nscV1tAmWaKBav3j/8iZFp9swUU
bkx/ZMh4As4D67Vxcq2Q05jVMWUeCjE2g4GS5e2wgxfdltgOgjCiCsy1t0P4
Q4XT8bNBEPAgY//NdDvEHTxtTNsdBG7xd/xo6Tsgyh5Lz58fBAbNB73Gb3YA
+16r5jmrIKCXkLz9nLETskr2fxs1BUL0nwj9hTtd8Ex9gWdG5zE0G3CeuMzY
DfP8J46u8z4EJvEplnsc3SBrJva59NBDsD2RzfPyXDcYeX5Pjp33g902jMyQ
UjdwLE2PvPjoBxgdFUvbG92g183h8F3JD2LVLfPcv3RD67lUd5z5A7BQSNZ4
cbUHeiqNovrzfIDEyxzQ87oX+sR28TvRXqDwMN2jNqsXpN/cRId8vSC4T8yh
uLAX9IglXPx2XsASrqkXXdcLVTdHIfU/L0BEH7ZLhF54KU8fGjHsCTFlI2W1
in3g9FhDkFfYE6R00yjFQ33goZLz6tCgBzzKwsy8m+6Dhc7awid1HtC0/3Ug
mtgHp/dep7MWeoBFcXe1K1U/3An0mXnwxAOCmQ8+FxLqB54rda5ssh7QO+Eg
lObTD1erQy//THSH+16idjEsA4ATnBx07XcDFjpK1VXeAdjkEZUZ/egGX999
OsuFGQDLK7eV7oW5wV6r4s8PFwZg9IJGM6uCGwTzakOr6wDcEePw1U25A9Gd
Nzlp6gcgqVngDNddV8gRSh32uzsIU/SQnC/hDNo1drJqfoOg4S6fvnrcGRav
CL44+mQQJNVEwmwIToB5/EE76fUgVJBDPN5nO8Gn/sry0sZBYNxgfEPkdIKa
4MGEZfYhuHCBvl+a2REGx04a32oZgqy2pqU5zltw6ZnDkFfPEOiyOgwlU9+C
KsVK65CxIUiolGh0wjtA2qsbLmnLQ1DqdUbT9qMDOF4uCx05Owz5m4Y+2cgB
dustyw2chsHzbpu+/62bwFGQwyFPNwKFOpju1lZ7iDb/naHBNAKT+u8c1krs
gerIZWETrhGgPa6lKZdsD7M3d2Q9pEcgnCc7ic7RHj5y6RkWWIxACY5Neemw
PaC4lSDughHoVuG47adjB7YPVOZp9UbBSuaeYmidDYjcbOknXx2FVgeuHa94
G1gzMGnotxsFns4/L1Ju2kCYgGt6ps8ohBU7RiTQ2sCHrjeWkDkKE9eKONkv
W8OO4O8u791RiKbn3zFaug5xPRVf8bljQLDIXuLQsYDr1Rrv2z+PgbCTWGo+
jwUI5nYnfK4ZA81WehHnbXP46r94L6hvDA5e8GAOyDWHcSFWMU6qX2DMsiO7
TmcOIo99003MfoFyIbZ/ZcgM6kXln9bTjMP5PKVju4mmYC1hkrnCMA76AmZC
X3xMYVvao4qbbRwwRgbzL81MAaNUQH4oPg6mmD3cjzOm8FKb+4qM2ThYMksw
7yebwC0HWo7s3HHQycaZu2ZfgSPvBj+G6U7AgfeGI0GDRpCRsd70xXQCzMd6
HnZ+MwKVnFOT0zYT4Da1EINNMwL3j7qM4DUBG3uyMcFORjD8Dee99XYC9Ezj
nLP2L0P+0HtwJE/AKYayQVHMZTh3tGohS3sSlFJpXSfU9GG1Wdw5Q38SmLhu
6UQw6UNNWPrSO+NJyNa7THGZ04Orh8LJr69Pgq3D8pfpp3rw5K/Reqz7JMhl
qJ+MGNCF2Y35v4+SJmFzOaouyPcSZEyfPmO6MAnnFe8JluG1wC09LMmYNAlO
zFfVDGq0QMl2h/Xy6iTsHaF3ZUvUgp5f4xy6e5Nggn91xkBHC6iH8/gunJyC
BcUOKc5iTbDtAnExhSnQuXJjWyxcAzirXDRoIqZAlhiLrzJXBybW3V23qCmY
8+jMyJZVh+PeEcVDcVPgMbuh33BKHfYkstk/pEyBrTbTo4xWNRjJHF8x/jwF
v6TWMkeRGrx6ZpSaNv4P/3qB9YTUBaC3lN9Slp2GS/I2m/n3ERz+2vghW2ka
AsuuizIpIdhnMrFnUJ2GiN53zSN/sEDsdO+YvjQNYXuOAQGRWGhVy8+MtJ0G
77e0a6czVSBchPPy4LNpEN82Dj47rwRUuwfy7k1Pg4aY9m52kTzYzgyvPZ6f
higbvp8iwfLwvb0YRRGnYa9QNXXDRB4C31n3vd+chvwFjknL33Lw92Ll3zG6
GTCqr5Sy15WDPzEeV7X+m4GAo8LxJ7dlYE9w8iBH6AzcKbjB3h8kDdcZyg2E
I2dgaUt/P/C6NFRtRyXLRc/ATz7x/5zkpeFRm7KEUdIM3PBn8SaRpOC3e6JF
2IcZUEh0uVltJQW73wxKlvtmYPxK+0EVbUnYMqq2bhSchT0fvqS4KAwEDxf9
QqKz8MsNuMZ1MUBvl3H9q+QscNbd6c6gw8A593CLAuVZGMlZ506IFAWTaKOr
L4xmoRxvcu5YlAgUt+L1rfxn4ZVE4ZmPeUKgYjzUPhA8C/gt92PorhA0D7fq
Xo6YBce/ixtYWSEYXyjSUY+fBZ4CNbmIuvNwnNZPQzhvFlI7LBVkp8+Bkzo9
dqNvFt5g+tucZAVhvZWqym1kFqw5TJXTqQUh0HhNaWFiFmgbrh9AnQKQZDek
MEqYhYoCL/VsRwFoepwhU0uFh7/HBx3ZMviBr0oOE4XBQ9yUdT/3eT4YlbFh
FwzFw4EO5bh7S1xwa0eW4UkkHugyNw2D3nLBcvXxg/hoPPQ+WU+RMuCCQ1qV
hKxkPKjv1R/1/MwJ4ubMlQJFeNiPLJeyfsIBgf5t1wRG8DCjWxtJrckGdGoZ
eqETeLBm/vm7jIoNEg4/UJ2dxcOq1yjxzzdWyI85J5RFwUMiR3Oemgwr9KYH
bfHTzAGP/J5poOhZONck/4pfcg60l8Z6T8iwQPFT+qchsnNw3aZWKnCLGZQM
8f4zSnPwO21j3fsbMxgOxTlkaszBWs6aBvkiM/gSSDL8lnNglrEeSLRigjb6
rF6+sH+4ocrwnfeM4G528hTf2BzseJ/q6RJkAPtcideCU3NQfdFQEPeTHkx3
DPiF5+bApCHgq+MjelB6EyUruTwHjFMHBvD9J4Bmgs4CHZoHqYvWlbdeHIfX
t2gyLTDzwGJ8esBfmA6elwtgrKXmobfF4FroxFF4fORiqZ3cPCSfGYqWfnUU
buYHNzuqzsOfZ78zgmiOggT575K3yTw4fky537ZECw33d2XiH83DRYXyq2wD
NFDWxFrzKmge/JzmCWdf0UDeGUWt12HzoPl9jPTxKg1EV/iYp8fOw/kxcbbE
4UNgvr/uX5Q1D68/xGvpzB0Eciilqa19HipST7ReYjsArC9nrx3iXIAZVeHa
ibZ9pBDCzeLFtwC+F6/7VDrso6v3LHpnzi9ALrHpZCHVPoq7/FO/XnoBFOIo
YwOKe+j4iSq1YO0FUK/wOLP8dRf9eRKPofJaAJpWHmHThS3Ecb9z8e6DBUjc
WE/8EreFlG8efT8RsABrzT8Y6NAW8lV7zIuLXADpurzO6MRNtPLHmSXg3QJ0
pKpxNZluoFkfNaq91gXgP/D4tsj+Kjpw27/a5ecCcNzyKNgqXUU8V7/6jfYv
wJWCpzxv7q4iKxnxjcrJBbiLUaG3wq+ggWVWwoPNBYjyHHqfNLKMfjit9G7x
LsLcwwGVgj4SWriGeXH7/CJ48E0sGtmQ0GHt2waDmEU4L/fhiMsSEamd+9VS
Jr8IOjzLU3O0RFQ13VJ9X38RwjjMeXKMCKjQMu39mu8iBJ++csNKcB7JDPLv
Hg5YhHC9igRi2xz6Zvxejy1kEa4EnuJ84TmHWnQKV1SjFqE4YYbxZBMezchX
KUenLwLLqkT3O59ZdJZpqEuodRE0lXZP4OmmUWqMJZ9K1yI8X3o2mlE7hQSP
TXgZ9i1CMlWVneGDKSR9YI7Ve3wRmMSivV2WJpH+8tqN+tVFePmp2njqywQK
bmfYtmInQGYFge9J/Sg6oh1/yYOHAI3xamb1eqMopp4lJVSQAG0xPTrJgyPo
bSWnWoEEAejSPu/+XhlG5bmiz7fVCcB7jO2kqOIQIoZq8cS7EiD585rEtxP9
yJOq7V6OBwHyXnoPvCrsQ7sPDRorvAlwBMdX0Ha5D9F6mjpPBhLgsY+hqHRy
L+Kzu/FFLIEAVXfrmaIUe5AZ9rF2SzUBEjIF3X84d6GxjTmGujoCMD6+8RYG
O5F9ocHgt2YCMGWLcU5rdCJXbq5bRd0EkGPzfRgv3IGCqatDXuEJkENH37N/
tA0dqRTQjSUQIO2cnA8mvBVF3XvO+JRCAG5ZrJXZ4VaUNGOZ7r9DgFSHgqqn
dD9QYeNuzc0TS6AWHbzdLNyMZALsw6wZlyC1hBSiUNaEKuRa9a+d+YerjrL4
XmxCDe+Tx3R5l8AoLfypwa1GNBypsCstuwTsZfVxdTX16JCBtyy11RKgVTtq
pZrv6Onh8b1duyWgenOMSsDhO2LAaTSs31qCd+/O/Hh64jtik2S+suC+BAE+
5ko+jTVIgvGLe1fov7xML0hfpQp9aWVX+BG5BHapTQ/m0r4hpZCQv3XRS2BW
IZAjfuQburhuHF2WtAS0v9UJueMVyGJgpSDlwxJ8mNnMNswvR5PR5p6JJf/6
8efKufKXIwetWqUXZUvg1677djW1DLl/jf0R+n0JxCf78thTSlHYa4l5l74l
4K8uuLr75TMqsb7Dp7S3BE9uKEkc0itG9qXLnGnURDirFckkiStCTMe9WA/T
EsG6e2djglCIvCv8TvacIsJN8Ra9GMOPSIkp4o/TeSJYcpPDFfTy0ZLzsd0u
DBGY/zv74ENCHnpbG70hK02Eudi4IvaZXPTHLYFIjSWC4Yzh8bzI96juR8ZI
sjHx331LFJUezEaePOcG/poRIWdRMkfBJQsJ+OR1O1gRob1mekp2IBOFCRS3
SDkSYbOWhtG+LAPpPq4u++FPBPrqXwkTKWlor1/1k0QIEUxUvn16wZ2GCjEN
HxMiiHD6aQQ+VvsdOjnSmmUXT4R9m9spZ++koD6ZobidXCJ8rswgzewkoyfP
LKNtConAtBm7nSSSjOSmxyMbPxOh6b311yDbJJQUgw98UUMEp+6rDZGjr5AV
YdVNuI8ICaf8ZxqPvUT0F7ydY4aJ4GDvKeh4Ix59T9xx2BgngrdKrYQ/Lg7x
aVBZ1S4SYePe8Ins0Bdo7t0JXfO/RNApcxqlCYpGiZuxmrhDJOCMToxJuxeF
tPWZ1ATpSCBl/0e0yeU5yt9lU1xhIkHiAYktBq+nyNIoVcaMjQQWk6eCZ4Mj
0fFcXslqbhKkJWoWZCVFoLumQucjRUjgmXW41WAoDPF8KOCjSJCgRo46hUQd
hnoOSHCZypJgt5+xeUrqCZIplmXmVSVBVe71OcWsELRNp36wwpQEeBa/mf7O
QMRIpn9ZZ0ECWq5PksbSgUi0e0Sg3YYEN/D99K0yj5F14j3NCScS7G2p63VQ
HiEfPzS44EYC9/VRLo2RhyjWis5x1ZMErAFfwrg6/FA9f0YkTQAJft9X2JZu
80Vjh93YGEJIYMhBNKIf8EGbi4oFZyNIMP1s+9ezBW8kVNzdLhpHAvPJEu0y
/vsoWoX6pHEOCfRLB9dJJA+Uy92RZllAgpfHV1V/S3qg2gPJUg7FJHD7Rttp
4OeO1lskr/hWkqBY6saOIXJD9B/2ZoJwJOCVpF6rXndF52NavJ41kECiIrbf
v8wFWZjavkrtJAGPY6BHs4UT8lLAnM/tJcH5EubAGhVHFMW+XV4yRIKZGywc
00K30fepmOGGaRI8EsH0JnI5IEE3HMfSJgmiuaei7XztEDJ69nH9NwnoVAP0
r2XZomsyZugPFRkoNBEao8U26Oku2ebUMTII3VXTOlJ8HWX9qlxmO0mGQ7rH
ong0LVH197AgAWYyaMX6dqcTzNFyGFemPDcZJocMHglYmSE6Z8J/FwTIgNdO
YTEQuYr49csaLgmTwVzM75jUIVN09bTBnNV/ZJA7+F/xszFj5L7J6nNbgQzj
y9Ls2BEjFDmMp/XAkoHLX0iXfeYyqnrnLxyqRYY3J+avdwsboIFgncooPTKc
uIZtv+inhygOzLqJRmTATJ/GKY9fQnyYj675lmQoZb/xiW5cCykzPNj/bEuG
vbyf3Ym+mshk9WJ0tQMZ9JLmXjMKaKDwr2NFP++SwfQ9R5dDgRpKe5OrOuJF
BuIdu7VTYRdQZYBX98wDMhxTH2C/clcVES8eX9sMIcOZGKXYlgEVdFhoKIQq
kgxqciaal3aVEPexLCa6aDIUmchKV8gpIuNuZTnOJDKs3dopcNuURXTKx2qr
UshgRpDNL9GTQbVZI7rXM8kgRtGUE6yWRr70+QO/c8lwk7WUM0ZTCkn6PrB7
U0iGkLbrBgFdEmhhSpuo9IUMHw2KezhBDL3TPeszUvGvPq2aev2wCKLnLn/O
2kiGSttLzknh51BTRNiZilYyJKRwlH56JYD8V00zrv0kwznAuL9v4UMy1wXF
tvvJ4ObZ1ZTEzouIjevliaP/9PZHhXuxc6NMiQY1+SkyVGTU76cpcSCL5PiO
gbl//r9UT7B7wYp+uErPMK+SQVRvUIQ0xIQCB6jdSrfI8KPTY62wnhEpqHZv
m+yTgdS3JrQyfBJR8tJC1g9QIJuTV3hbih7lnHanf3mEAvTp3FIue3TI2h+S
/6OnwBV6zJkL9EcQ8zy9QO9pCphZDp3/ak+D2i+PF95jpUBDQAyN5sYBFFr5
UZGRmwIHLARtXtVSIRUB/4YSAQpgLnbonQ7fx65F6RkaiVCgMcoo6jZ5B5u/
xT6yLEGB/NLPZaUlm1h7u6WbsbIUmN/i6Vj6sYZla6ukSChTgOIrz2AmuYLt
lnnq16VKgefCek1q1SRsRKo5zV1NCkRbJYWnpCxiVY8Ix9LrUUD/8GfL+5t4
7LbHNluhEQXKKaOsotXT2KLR5mx9MwocL8FnRHRNYG9pJEqSrlPgtYCbdvvw
CJar6Na35/YUuKlFfyEtfAA7cFZOE+P4T1+vqnxhSw82Kpimu+0OBcKm/CQC
2buwF4l9li6eFNCZozxzefEDu2eaNUf3gAJaFyB9Y6gB+wXn6ZEfQIGYWRW9
7eHvWBdh9T2d0H/zNbET8NmrxPLFM4YvRlLA4EPe6Tr7UuzI3tSpyBgK6Crl
RaTWFmNf3Cp5K5RAgfMpIsNe5Dys9s/A8y2vKdCu9Sd480cmlkrp8qfbaRTQ
zFbvvlKdgi3P5MbS5lDg03nRb8GbCVi3E5TmnAIKCD/9q5vSFYM951NjrFlC
Af+0t+Si8DDsr8moX/gyCmx42zxOZH+MfXnJyvFJFQVsXM9EHx72wup9wawJ
1FGgyH2FLmbPGXuQa8+/oZkCORGVo4W1ttjK8LYjNzsoINjbRD7WegV7b+V1
/MHef3o3xf1SNjWwIpbOXJlDFPga1KvTFS6HnWpQzFMbp0B/xcJtoWEBbJL4
UZnpGQoIGB4M7qo9ib2cNFQTtEiB8OrQ7Z7NDZUjB3J1eCkUyFNm4HAd7lPB
ufj0fV+ngOqe4yZ2K1vFu1/Txnb3n99mTFunt01V/v//BP9Fmlcqaq7J/w/O
hCkg
     "]]}, 
   {Hue[0.9060679774997897, 0.6, 0.6], LineBox[CompressedData["
1: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
t9xIL9L9P1NbC9A=
     "]]}, 
   {Hue[0.1421359549995791, 0.6, 0.6], LineBox[CompressedData["
1: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
     "]]}, 
   {Hue[0.37820393249936934`, 0.6, 0.6], LineBox[CompressedData["
1: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
iv8D+xDkjA==
     "]]}, 
   {Hue[0.6142719099991583, 0.6, 0.6], LineBox[CompressedData["
1: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

     "]]}, 
   {Hue[0.8503398874989481, 0.6, 0.6], LineBox[CompressedData["
1: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
WH/LYe4ngf//n4V3JSl9/5/8PwM7F2U=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  ImageSize->Automatic,
  PlotRange->{{-1, 1}, {0., 0.9999998979591879}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.5865189096545067`*^9, 3.586520755766676*^9, 
  3.5865208509268427`*^9, 3.586521506315194*^9, 3.5865230158744564`*^9, 
  3.5895449574743567`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"cMat", "[", 
   RowBox[{"n_", ",", "i_", ",", "j_", ",", "R_"}], "]"}], ":=", 
  RowBox[{
   SubsuperscriptBox["\[Integral]", "0", "R"], 
   RowBox[{
    RowBox[{"BPolynomial", "[", 
     RowBox[{"n", ",", "i", ",", "0", ",", "R", ",", "x"}], "]"}], " ", 
    RowBox[{"BPolynomial", "[", 
     RowBox[{"n", ",", "j", ",", "0", ",", "R", ",", "x"}], "]"}], 
    RowBox[{"\[DifferentialD]", "x"}]}]}]}]], "Input",
 CellChangeTimes->{{3.586523044114496*^9, 3.5865230946745667`*^9}, {
  3.5865231444446363`*^9, 3.5865231975647106`*^9}, {3.5865235375501904`*^9, 
  3.5865235389001923`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cMat", "[", 
  RowBox[{"2", ",", "0", ",", "0", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.5865236073277884`*^9, 3.586523633227824*^9}}],

Cell[BoxData[
 FractionBox["1", "5"]], "Output",
 CellChangeTimes->{3.586523635867828*^9, 3.5895449670995736`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"dMat", "[", 
   RowBox[{"n_", ",", "i_", ",", "j_", ",", "R_"}], "]"}], ":=", 
  RowBox[{
   SubsuperscriptBox["\[Integral]", "0", "R"], 
   RowBox[{
    RowBox[{"BPolynomial", "[", 
     RowBox[{"n", ",", "i", ",", "0", ",", "R", ",", "x"}], "]"}], " ", 
    RowBox[{
     SubscriptBox["\[PartialD]", "x"], 
     RowBox[{"BPolynomial", "[", 
      RowBox[{"n", ",", "j", ",", "0", ",", "R", ",", "x"}], "]"}]}], 
    RowBox[{"\[DifferentialD]", "x"}]}]}]}]], "Input",
 CellChangeTimes->{{3.5865236869479*^9, 3.586523748797986*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dMat", "[", 
  RowBox[{"2", ",", "0", ",", "0", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.5865237747580223`*^9, 3.5865237754780235`*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["1", "2"]}]], "Output",
 CellChangeTimes->{3.5865237763180246`*^9, 3.589544971701582*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"kappaMat", "[", 
    RowBox[{"n_", ",", "i_", ",", "j_", ",", "R_", ",", "k_"}], "]"}], ":=", 
   RowBox[{"NIntegrate", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"BPolynomial", "[", 
       RowBox[{"n", ",", "i", ",", "0", ",", "R", ",", "x"}], "]"}], " ", 
      RowBox[{"(", 
       FractionBox["k", "x"], ")"}], " ", 
      RowBox[{"BPolynomial", "[", 
       RowBox[{"n", ",", "j", ",", "0", ",", "R", ",", "x"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "R"}], "}"}], ",", 
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<GlobalAdaptive\>\"", ",", 
        RowBox[{"\"\<SingularityDepth\>\"", "\[Rule]", "20"}], ",", 
        RowBox[{"\"\<SingularityHandler\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<IMT\>\"", ",", 
           RowBox[{"\"\<TuningParameters\>\"", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"10", ",", "2"}], "}"}]}]}], "}"}]}]}], "}"}]}], ",", 
     RowBox[{"MaxRecursion", "\[Rule]", "15"}], ",", 
     RowBox[{"WorkingPrecision", "\[Rule]", "MachinePrecision"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.586523892998188*^9, 3.5865239180382233`*^9}, {
   3.5865239547682743`*^9, 3.586523981618312*^9}, {3.586527420493491*^9, 
   3.5865274216946936`*^9}, {3.586529441688987*^9, 3.5865294448489914`*^9}, {
   3.5865342143845444`*^9, 3.5865342197977543`*^9}, {3.5865407938388286`*^9, 
   3.5865407995172386`*^9}, {3.5895450995126057`*^9, 3.589545113739831*^9}, {
   3.5895457637305727`*^9, 3.5895458391879053`*^9}, {3.5895461318756194`*^9, 
   3.5895461415008364`*^9}, {3.5895463281239643`*^9, 3.589546328623165*^9}, {
   3.5895465244347086`*^9, 3.589546533264324*^9}, 3.5895469923320847`*^9, {
   3.5895470873830514`*^9, 3.5895471408911457`*^9}, {3.589547178986412*^9, 
   3.589547243788926*^9}, {3.589547288545405*^9, 3.5895473471391077`*^9}, {
   3.5895474184468327`*^9, 3.5895475245894194`*^9}, 3.589547563105887*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"cMat", "[", 
   RowBox[{"n_", ",", "R_"}], "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"cMat", "[", 
     RowBox[{"n", ",", "i", ",", "j", ",", "R"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "n"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "0", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.586530499540682*^9, 3.586530589080807*^9}, {
  3.586530626180859*^9, 3.586530643700884*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cMat", "[", 
  RowBox[{"2", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.586530670400921*^9, 3.5865306784009323`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "5"], ",", 
     FractionBox["1", "10"], ",", 
     FractionBox["1", "30"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "10"], ",", 
     FractionBox["2", "15"], ",", 
     FractionBox["1", "10"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "30"], ",", 
     FractionBox["1", "10"], ",", 
     FractionBox["1", "5"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5865306798809347`*^9, 3.5895451225070467`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"dMat", "[", 
   RowBox[{"n_", ",", "R_"}], "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"dMat", "[", 
     RowBox[{"n", ",", "i", ",", "j", ",", "R"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "n"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "0", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5865307946910954`*^9, 3.586530800561103*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"cMat", "[", 
   RowBox[{"2", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5865308555711803`*^9, 3.5865308912312303`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox["1", "5"], 
      FractionBox["1", "10"], 
      FractionBox["1", "30"]},
     {
      FractionBox["1", "10"], 
      FractionBox["2", "15"], 
      FractionBox["1", "10"]},
     {
      FractionBox["1", "30"], 
      FractionBox["1", "10"], 
      FractionBox["1", "5"]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.5865308695312*^9, 3.586530892021231*^9}, 
   3.5895451275614557`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"vMat", "[", 
    RowBox[{"n_", ",", "i_", ",", "j_", ",", "R_"}], "]"}], ":=", 
   RowBox[{"NIntegrate", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"BPolynomial", "[", 
       RowBox[{"n", ",", "i", ",", "0", ",", "R", ",", "x"}], "]"}], " ", 
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "Z"}], " ", 
         SuperscriptBox["e", "2"]}], "x"], ")"}], " ", 
      RowBox[{"BPolynomial", "[", 
       RowBox[{"n", ",", "j", ",", "0", ",", "R", ",", "x"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "R"}], "}"}], ",", 
     RowBox[{"Exclusions", "\[Rule]", 
      RowBox[{"{", "0", "}"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.586531000891384*^9, 3.586531045001446*^9}, {
   3.586531076221489*^9, 3.58653107706149*^9}, 3.5865316659223146`*^9, {
   3.5865323632632914`*^9, 3.586532393333333*^9}, {3.586534105199953*^9, 
   3.586534114497569*^9}, {3.5895451410866795`*^9, 3.5895451503062954`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"kappaMat", "[", 
   RowBox[{"n_", ",", "R_", ",", "k_"}], "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"kappaMat", "[", 
     RowBox[{"n", ",", "i", ",", "j", ",", "R", ",", "k"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "n"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "0", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.586531140401579*^9, 3.586531168231618*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"vMat", "[", 
   RowBox[{"n_", ",", "R_"}], "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"vMat", "[", 
     RowBox[{"n", ",", "i", ",", "j", ",", "R"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "n"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "0", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5865312142916822`*^9, 3.5865312242516966`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"\[Epsilon]Mat", "[", 
    RowBox[{"n_", ",", "elem_", ",", "nprime_", ",", "k_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"En", " ", "[", 
     RowBox[{"elem", ",", "nprime", ",", "k"}], "]"}], " ", 
    RowBox[{"IdentityMatrix", "[", 
     RowBox[{"n", "+", "1"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.586531727782401*^9, 3.586531773972466*^9}, {
   3.586531811122518*^9, 3.5865318678225975`*^9}, {3.5865319357926927`*^9, 
   3.5865319408126993`*^9}, 3.5865319731727448`*^9, {3.586532079522894*^9, 
   3.586532080102895*^9}, 3.5895456259199305`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"\[Epsilon]Mat", "[", 
   RowBox[{"2", ",", "element", ",", "2", ",", 
    RowBox[{"-", "1"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5865319921227713`*^9, 3.586532048692851*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"17793.944055191074`", "0.`", "0.`"},
     {"0.`", "17793.944055191074`", "0.`"},
     {"0.`", "0.`", "17793.944055191074`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.586532051032854*^9, 3.586532086772904*^9, 
  3.5895451907415667`*^9, 3.589545641176758*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"kappaMat", "[", 
   RowBox[{"1", ",", "1", ",", 
    RowBox[{"-", "1"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.586532146692988*^9, 3.5865321545929985`*^9}, {
   3.586540733076722*^9, 3.5865407534503574`*^9}, 3.589546963643634*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(15\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.000030274739991681557`}\\)\[NoBreak]. NIntegrate obtained \
\[NoBreak]\\!\\(-15.303282596726671`\\)\[NoBreak] and \
\[NoBreak]\\!\\(1.8394085622643825`\\)\[NoBreak] for the integral and error \
estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\
\\\", ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\
\", ButtonNote -> \\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.5865408091736555`*^9, 3.589545195125174*^9, 3.589545875629569*^9, 
   3.5895461957577314`*^9, 3.589546336594779*^9, 3.5895465419379396`*^9, 
   3.5895469660304384`*^9, 3.589546997043293*^9, {3.5895471124210954`*^9, 
   3.5895471448379526`*^9}, {3.5895471885960293`*^9, 3.589547247735733*^9}, {
   3.5895473426775*^9, 3.589547366061941*^9}, {3.5895474268552475`*^9, 
   3.5895474849185495`*^9}, 3.5895475286142263`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "15.303282596726671`"}], 
      RowBox[{"-", "0.5000000000000006`"}]},
     {
      RowBox[{"-", "0.5000000000000006`"}], 
      RowBox[{"-", "0.5000000000000006`"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.586532156233001*^9, 3.5865322617631493`*^9, 3.5865324041333485`*^9, 
   3.5865341243255863`*^9, 3.5865407562427626`*^9, 3.5865408093764563`*^9, 
   3.5895451955619745`*^9, 3.589545954706108*^9, 3.589546209048955*^9, 
   3.589546336828779*^9, 3.589546946296404*^9, {3.589546987402476*^9, 
   3.5895469970744925`*^9}, {3.589547112499096*^9, 3.5895471448535523`*^9}, {
   3.5895471886116295`*^9, 3.589547202277253*^9}, 3.5895472382509165`*^9, 
   3.589547316719054*^9, {3.589547352661517*^9, 3.589547366077541*^9}, {
   3.589547430833255*^9, 3.5895474849341497`*^9}, 3.5895475286454268`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"kappaMat1", "[", 
   RowBox[{"n_", ",", "i_", ",", "j_", ",", "R_", ",", "k_"}], "]"}], ":=", 
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"BPolynomial", "[", 
      RowBox[{"n", ",", "i", ",", "0", ",", "R", ",", "x"}], "]"}], " ", 
     RowBox[{"(", 
      FractionBox["k", "x"], ")"}], " ", 
     RowBox[{"BPolynomial", "[", 
      RowBox[{"n", ",", "j", ",", "0", ",", "R", ",", "x"}], "]"}]}], ",", 
    "x"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5865400101870522`*^9, 3.5865400161774626`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"kappaMat1", "[", 
  RowBox[{"2", ",", "0", ",", "0", ",", "R", ",", "k"}], "]"}]], "Input",
 CellChangeTimes->{{3.5865400212786713`*^9, 3.586540051651925*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      RowBox[{"25", " ", 
       SuperscriptBox["R", "4"]}], "12"], "-", 
     RowBox[{"4", " ", 
      SuperscriptBox["R", "3"], " ", "x"}], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["R", "2"], " ", 
      SuperscriptBox["x", "2"]}], "-", 
     FractionBox[
      RowBox[{"4", " ", "R", " ", 
       SuperscriptBox["x", "3"]}], "3"], "+", 
     FractionBox[
      SuperscriptBox["x", "4"], "4"], "+", 
     RowBox[{
      SuperscriptBox["R", "4"], " ", 
      RowBox[{"Log", "[", 
       RowBox[{"-", "x"}], "]"}]}]}], ")"}]}], 
  SuperscriptBox["R", "4"]]], "Output",
 CellChangeTimes->{3.586540052665927*^9, 3.586540167965729*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "/.", 
  RowBox[{"x", "->", 
   RowBox[{"-", "r"}]}]}]], "Input",
 CellChangeTimes->{{3.5865401149256363`*^9, 3.5865401713353353`*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      SuperscriptBox["r", "4"], "4"], "+", 
     FractionBox[
      RowBox[{"4", " ", 
       SuperscriptBox["r", "3"], " ", "R"}], "3"], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["r", "2"], " ", 
      SuperscriptBox["R", "2"]}], "+", 
     RowBox[{"4", " ", "r", " ", 
      SuperscriptBox["R", "3"]}], "+", 
     FractionBox[
      RowBox[{"25", " ", 
       SuperscriptBox["R", "4"]}], "12"], "+", 
     RowBox[{
      SuperscriptBox["R", "4"], " ", 
      RowBox[{"Log", "[", "r", "]"}]}]}], ")"}]}], 
  SuperscriptBox["R", "4"]]], "Output",
 CellChangeTimes->{{3.5865401366720743`*^9, 3.586540174736141*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%%", "/.", 
  RowBox[{"x", "->", 
   RowBox[{"-", "\[Epsilon]"}]}]}]], "Input",
 CellChangeTimes->{{3.586540199025384*^9, 3.5865402170902157`*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      RowBox[{"25", " ", 
       SuperscriptBox["R", "4"]}], "12"], "+", 
     RowBox[{"4", " ", 
      SuperscriptBox["R", "3"], " ", "\[Epsilon]"}], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["R", "2"], " ", 
      SuperscriptBox["\[Epsilon]", "2"]}], "+", 
     FractionBox[
      RowBox[{"4", " ", "R", " ", 
       SuperscriptBox["\[Epsilon]", "3"]}], "3"], "+", 
     FractionBox[
      SuperscriptBox["\[Epsilon]", "4"], "4"], "+", 
     RowBox[{
      SuperscriptBox["R", "4"], " ", 
      RowBox[{"Log", "[", "\[Epsilon]", "]"}]}]}], ")"}]}], 
  SuperscriptBox["R", "4"]]], "Output",
 CellChangeTimes->{3.5865402186814184`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%%%", "/.", 
  RowBox[{"x", "\[Rule]", "R"}]}]], "Input",
 CellChangeTimes->{{3.586540232518643*^9, 3.5865402422062597`*^9}}],

Cell[BoxData[
 RowBox[{"k", " ", 
  RowBox[{"Log", "[", 
   RowBox[{"-", "R"}], "]"}]}]], "Output",
 CellChangeTimes->{3.586540243235862*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%%%%", "/.", 
  RowBox[{"x", "\[Rule]", "r"}]}]], "Input",
 CellChangeTimes->{{3.586540247354269*^9, 3.586540258336688*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      SuperscriptBox["r", "4"], "4"], "-", 
     FractionBox[
      RowBox[{"4", " ", 
       SuperscriptBox["r", "3"], " ", "R"}], "3"], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["r", "2"], " ", 
      SuperscriptBox["R", "2"]}], "-", 
     RowBox[{"4", " ", "r", " ", 
      SuperscriptBox["R", "3"]}], "+", 
     FractionBox[
      RowBox[{"25", " ", 
       SuperscriptBox["R", "4"]}], "12"], "+", 
     RowBox[{
      SuperscriptBox["R", "4"], " ", 
      RowBox[{"Log", "[", 
       RowBox[{"-", "r"}], "]"}]}]}], ")"}]}], 
  SuperscriptBox["R", "4"]]], "Output",
 CellChangeTimes->{3.5865402593818903`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   FractionBox[
    RowBox[{"k", " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        SuperscriptBox["r", "4"], "4"], "+", 
       FractionBox[
        RowBox[{"4", " ", 
         SuperscriptBox["r", "3"], " ", "R"}], "3"], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox["r", "2"], " ", 
        SuperscriptBox["R", "2"]}], "+", 
       RowBox[{"4", " ", "r", " ", 
        SuperscriptBox["R", "3"]}], "+", 
       FractionBox[
        RowBox[{"25", " ", 
         SuperscriptBox["R", "4"]}], "12"], "+", 
       RowBox[{
        SuperscriptBox["R", "4"], " ", 
        RowBox[{"Log", "[", "r", "]"}]}]}], ")"}]}], 
    SuperscriptBox["R", "4"]], ")"}], "-", 
  RowBox[{"(", 
   FractionBox[
    RowBox[{"k", " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{"25", " ", 
         SuperscriptBox["R", "4"]}], "12"], "+", 
       RowBox[{"4", " ", 
        SuperscriptBox["R", "3"], " ", "\[Epsilon]"}], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox["R", "2"], " ", 
        SuperscriptBox["\[Epsilon]", "2"]}], "+", 
       FractionBox[
        RowBox[{"4", " ", "R", " ", 
         SuperscriptBox["\[Epsilon]", "3"]}], "3"], "+", 
       FractionBox[
        SuperscriptBox["\[Epsilon]", "4"], "4"], "+", 
       RowBox[{
        SuperscriptBox["R", "4"], " ", 
        RowBox[{"Log", "[", "\[Epsilon]", "]"}]}]}], ")"}]}], 
    SuperscriptBox["R", "4"]], ")"}], "+", 
  RowBox[{"(", 
   RowBox[{"k", " ", 
    RowBox[{"Log", "[", 
     RowBox[{"-", "R"}], "]"}]}], ")"}], "-", 
  RowBox[{"(", 
   FractionBox[
    RowBox[{"k", " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        SuperscriptBox["r", "4"], "4"], "-", 
       FractionBox[
        RowBox[{"4", " ", 
         SuperscriptBox["r", "3"], " ", "R"}], "3"], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox["r", "2"], " ", 
        SuperscriptBox["R", "2"]}], "-", 
       RowBox[{"4", " ", "r", " ", 
        SuperscriptBox["R", "3"]}], "+", 
       FractionBox[
        RowBox[{"25", " ", 
         SuperscriptBox["R", "4"]}], "12"], "+", 
       RowBox[{
        SuperscriptBox["R", "4"], " ", 
        RowBox[{"Log", "[", 
         RowBox[{"-", "r"}], "]"}]}]}], ")"}]}], 
    SuperscriptBox["R", "4"]], ")"}]}]], "Input",
 CellChangeTimes->{{3.58654027647952*^9, 3.5865403373040266`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{"k", " ", 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        SuperscriptBox["r", "4"], "4"], "-", 
       FractionBox[
        RowBox[{"4", " ", 
         SuperscriptBox["r", "3"], " ", "R"}], "3"], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox["r", "2"], " ", 
        SuperscriptBox["R", "2"]}], "-", 
       RowBox[{"4", " ", "r", " ", 
        SuperscriptBox["R", "3"]}], "+", 
       FractionBox[
        RowBox[{"25", " ", 
         SuperscriptBox["R", "4"]}], "12"], "+", 
       RowBox[{
        SuperscriptBox["R", "4"], " ", 
        RowBox[{"Log", "[", 
         RowBox[{"-", "r"}], "]"}]}]}], ")"}]}], 
    SuperscriptBox["R", "4"]]}], "+", 
  FractionBox[
   RowBox[{"k", " ", 
    RowBox[{"(", 
     RowBox[{
      FractionBox[
       SuperscriptBox["r", "4"], "4"], "+", 
      FractionBox[
       RowBox[{"4", " ", 
        SuperscriptBox["r", "3"], " ", "R"}], "3"], "+", 
      RowBox[{"3", " ", 
       SuperscriptBox["r", "2"], " ", 
       SuperscriptBox["R", "2"]}], "+", 
      RowBox[{"4", " ", "r", " ", 
       SuperscriptBox["R", "3"]}], "+", 
      FractionBox[
       RowBox[{"25", " ", 
        SuperscriptBox["R", "4"]}], "12"], "+", 
      RowBox[{
       SuperscriptBox["R", "4"], " ", 
       RowBox[{"Log", "[", "r", "]"}]}]}], ")"}]}], 
   SuperscriptBox["R", "4"]], "+", 
  RowBox[{"k", " ", 
   RowBox[{"Log", "[", 
    RowBox[{"-", "R"}], "]"}]}], "-", 
  FractionBox[
   RowBox[{"k", " ", 
    RowBox[{"(", 
     RowBox[{
      FractionBox[
       RowBox[{"25", " ", 
        SuperscriptBox["R", "4"]}], "12"], "+", 
      RowBox[{"4", " ", 
       SuperscriptBox["R", "3"], " ", "\[Epsilon]"}], "+", 
      RowBox[{"3", " ", 
       SuperscriptBox["R", "2"], " ", 
       SuperscriptBox["\[Epsilon]", "2"]}], "+", 
      FractionBox[
       RowBox[{"4", " ", "R", " ", 
        SuperscriptBox["\[Epsilon]", "3"]}], "3"], "+", 
      FractionBox[
       SuperscriptBox["\[Epsilon]", "4"], "4"], "+", 
      RowBox[{
       SuperscriptBox["R", "4"], " ", 
       RowBox[{"Log", "[", "\[Epsilon]", "]"}]}]}], ")"}]}], 
   SuperscriptBox["R", "4"]]}]], "Output",
 CellChangeTimes->{3.5865403389264297`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.5865403498308487`*^9, 3.5865403540584564`*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "12"], " ", "k", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "25"}], "+", 
    FractionBox[
     RowBox[{"32", " ", 
      SuperscriptBox["r", "3"]}], 
     SuperscriptBox["R", "3"]], "+", 
    FractionBox[
     RowBox[{"96", " ", "r"}], "R"], "-", 
    FractionBox[
     RowBox[{"48", " ", "\[Epsilon]"}], "R"], "-", 
    FractionBox[
     RowBox[{"36", " ", 
      SuperscriptBox["\[Epsilon]", "2"]}], 
     SuperscriptBox["R", "2"]], "-", 
    FractionBox[
     RowBox[{"16", " ", 
      SuperscriptBox["\[Epsilon]", "3"]}], 
     SuperscriptBox["R", "3"]], "-", 
    FractionBox[
     RowBox[{"3", " ", 
      SuperscriptBox["\[Epsilon]", "4"]}], 
     SuperscriptBox["R", "4"]], "-", 
    RowBox[{"12", " ", 
     RowBox[{"Log", "[", 
      RowBox[{"-", "r"}], "]"}]}], "+", 
    RowBox[{"12", " ", 
     RowBox[{"Log", "[", "r", "]"}]}], "+", 
    RowBox[{"12", " ", 
     RowBox[{"Log", "[", 
      RowBox[{"-", "R"}], "]"}]}], "-", 
    RowBox[{"12", " ", 
     RowBox[{"Log", "[", "\[Epsilon]", "]"}]}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.586540354698057*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", "%%", "]"}]], "Input",
 CellChangeTimes->{{3.5865403902193193`*^9, 3.586540396786931*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"32", " ", 
      SuperscriptBox["r", "3"], " ", "R"}], "+", 
     RowBox[{"96", " ", "r", " ", 
      SuperscriptBox["R", "3"]}], "-", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"R", "+", "\[Epsilon]"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"25", " ", 
         SuperscriptBox["R", "3"]}], "+", 
        RowBox[{"23", " ", 
         SuperscriptBox["R", "2"], " ", "\[Epsilon]"}], "+", 
        RowBox[{"13", " ", "R", " ", 
         SuperscriptBox["\[Epsilon]", "2"]}], "+", 
        RowBox[{"3", " ", 
         SuperscriptBox["\[Epsilon]", "3"]}]}], ")"}]}], "+", 
     RowBox[{"12", " ", 
      SuperscriptBox["R", "4"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Log", "[", 
          RowBox[{"-", "r"}], "]"}]}], "+", 
        RowBox[{"Log", "[", "r", "]"}], "+", 
        RowBox[{"Log", "[", 
         RowBox[{"-", "R"}], "]"}], "-", 
        RowBox[{"Log", "[", "\[Epsilon]", "]"}]}], ")"}]}]}], ")"}]}], 
  RowBox[{"12", " ", 
   SuperscriptBox["R", "4"]}]]], "Output",
 CellChangeTimes->{3.586540397816533*^9}]
}, Open  ]]
},
WindowSize->{1242, 796},
WindowMargins->{{17, Automatic}, {Automatic, 19}},
ShowSelection->True,
FrontEndVersion->"8.0 for Microsoft Windows (64-bit) (February 23, 2011)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 83, 1, 31, "Input"],
Cell[643, 23, 2417, 66, 197, "Input"],
Cell[3063, 91, 763, 21, 52, "Input"],
Cell[CellGroupData[{
Cell[3851, 116, 664, 16, 31, "Input"],
Cell[4518, 134, 59004, 981, 248, "Output"]
}, Open  ]],
Cell[63537, 1118, 620, 14, 44, "Input"],
Cell[CellGroupData[{
Cell[64182, 1136, 168, 3, 31, "Input"],
Cell[64353, 1141, 114, 2, 47, "Output"]
}, Open  ]],
Cell[64482, 1146, 567, 14, 44, "Input"],
Cell[CellGroupData[{
Cell[65074, 1164, 170, 3, 31, "Input"],
Cell[65247, 1169, 132, 3, 47, "Output"]
}, Open  ]],
Cell[65394, 1175, 1996, 39, 94, "Input"],
Cell[67393, 1216, 489, 13, 31, "Input"],
Cell[CellGroupData[{
Cell[67907, 1233, 148, 3, 31, "Input"],
Cell[68058, 1238, 551, 18, 47, "Output"]
}, Open  ]],
Cell[68624, 1259, 442, 12, 31, "Input"],
Cell[CellGroupData[{
Cell[69091, 1275, 188, 4, 31, "Input"],
Cell[69282, 1281, 941, 29, 101, "Output"]
}, Open  ]],
Cell[70238, 1313, 1018, 24, 54, "Input"],
Cell[71259, 1339, 469, 12, 31, "Input"],
Cell[71731, 1353, 444, 12, 31, "Input"],
Cell[72178, 1367, 609, 13, 31, "Input"],
Cell[CellGroupData[{
Cell[72812, 1384, 241, 5, 31, "Input"],
Cell[73056, 1391, 796, 20, 71, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73889, 1416, 294, 6, 31, "Input"],
Cell[74186, 1424, 1203, 20, 39, "Message"],
Cell[75392, 1446, 1358, 30, 57, "Output"]
}, Open  ]],
Cell[76765, 1479, 562, 14, 47, "Input"],
Cell[CellGroupData[{
Cell[77352, 1497, 183, 3, 31, "Input"],
Cell[77538, 1502, 739, 23, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78314, 1530, 163, 4, 31, "Input"],
Cell[78480, 1536, 720, 22, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79237, 1563, 171, 4, 31, "Input"],
Cell[79411, 1569, 741, 22, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[80189, 1596, 149, 3, 31, "Input"],
Cell[80341, 1601, 141, 4, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[80519, 1610, 148, 3, 31, "Input"],
Cell[80670, 1615, 719, 23, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81426, 1643, 2373, 73, 75, "Input"],
Cell[83802, 1718, 2232, 70, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86071, 1793, 131, 2, 31, "Input"],
Cell[86205, 1797, 1126, 36, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87368, 1838, 134, 2, 31, "Input"],
Cell[87505, 1842, 1185, 35, 52, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
